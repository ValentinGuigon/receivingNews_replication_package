color = gray(0.6), alpha = 1, size = 1) +
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color = "black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color = "black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
##### JUDGMENT MEAN #####
### IMPRECISION
# Compute proportion data using the subject-wise mean
judgment_proportion_data_Imprecision <- dRec_Imprecision %>%
group_by(Imprecision_Valence, Veracity, Subject) %>%
summarize(Proportion_Judgment = sum(Judgment == 1) / n())
# Reorder levels for facet_grid and Valence
judgment_proportion_data_Imprecision$Veracity <- factor(judgment_proportion_data_Imprecision$Veracity, levels = c("False", "True"))
judgment_proportion_data_Imprecision$Imprecision_Valence <- factor(judgment_proportion_data_Imprecision$Imprecision_Valence, levels = c("Precise", "Imprecise"))
# Compute mean and standard error for each combination of Imprecision_Valence and Veracity
judgment_proportion_data_Imprecision_summary <- judgment_proportion_data_Imprecision %>%
group_by(Imprecision_Valence, Veracity) %>%
summarize(Mean_Judgment = mean(Proportion_Judgment),
Standard_Error = sd(Proportion_Judgment) / sqrt(n()))
# Barplot with error bars using geom_col
judgment_imprecision_barplot <- ggplot(judgment_proportion_data_Imprecision_summary, aes(x = Imprecision_Valence, y = Mean_Judgment, fill = Veracity)) +
geom_col(position = position_dodge(width = 0.9), color = "black") +
geom_errorbar(aes(ymin = Mean_Judgment - Standard_Error, ymax = Mean_Judgment + Standard_Error),
position = position_dodge(width = 0.9), width = 0.25) +
geom_jitter(data = judgment_proportion_data_Imprecision,
aes(x = Imprecision_Valence, y = Proportion_Judgment),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.9),
color = gray(0.6), alpha = 1, size = 1) +
labs(title = "Imprecision",
x = NULL,
y = "Judgments as true") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
labs(fill = "Veracity:") +
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) + # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
### Polarization
# Compute proportion data using the subject-wise mean
judgment_proportion_data_Polarization <- dRec_Polarization %>%
group_by(Polarization_Valence, Veracity, Subject) %>%
summarize(Proportion_Judgment = sum(Judgment == 1) / n())
# Reorder levels for facet_grid and Valence
judgment_proportion_data_Polarization$Veracity <- factor(judgment_proportion_data_Polarization$Veracity, levels = c("False", "True"))
judgment_proportion_data_Polarization$Polarization_Valence <- factor(judgment_proportion_data_Polarization$Polarization_Valence, levels = c("Consensual", "Polarizing"))
# Compute mean and standard error for each combination of Polarization_Valence and Veracity
judgment_proportion_data_Polarization_summary <- judgment_proportion_data_Polarization %>%
group_by(Polarization_Valence, Veracity) %>%
summarize(Mean_Judgment = mean(Proportion_Judgment),
Standard_Error = sd(Proportion_Judgment) / sqrt(n()))
# Barplot with error bars using geom_col
judgment_Polarization_barplot <- ggplot(judgment_proportion_data_Polarization_summary, aes(x = Polarization_Valence, y = Mean_Judgment, fill = Veracity)) +
geom_col(position = position_dodge(width = 0.9), color = "black") +
geom_errorbar(aes(ymin = Mean_Judgment - Standard_Error, ymax = Mean_Judgment + Standard_Error),
position = position_dodge(width = 0.9), width = 0.25) +
geom_jitter(data = judgment_proportion_data_Polarization,
aes(x = Polarization_Valence, y = Proportion_Judgment),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.9),
color = gray(0.6), alpha = 1, size = 1) +
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18)) +
theme(legend.title = element_text(size = 18)) +
theme(legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
##### RECEPTION MEAN #####
### IMPRECISION
# Compute proportion data using the subject-wise mean
reception_proportion_data_Imprecision <- dRec_Imprecision %>%
group_by(Imprecision_Valence, Veracity, Subject) %>%
summarize(Proportion_Reception = sum(Reception == 1) / n())
# Reorder levels for facet_grid and Valence
reception_proportion_data_Imprecision$Veracity <- factor(reception_proportion_data_Imprecision$Veracity, levels = c("False", "True"))
reception_proportion_data_Imprecision$Imprecision_Valence <- factor(reception_proportion_data_Imprecision$Imprecision_Valence, levels = c("Precise", "Imprecise"))
# Compute mean and standard error for each combination of Imprecision_Valence and Veracity
reception_proportion_data_Imprecision_summary <- reception_proportion_data_Imprecision %>%
group_by(Imprecision_Valence, Veracity) %>%
summarize(Mean_Reception = mean(Proportion_Reception),
Standard_Error = sd(Proportion_Reception) / sqrt(n()))
# Barplot with error bars using geom_col
reception_imprecision_barplot <- ggplot(reception_proportion_data_Imprecision_summary, aes(x = Imprecision_Valence, y = Mean_Reception, fill = Veracity)) +
geom_col(position = position_dodge(width = 0.9), color = "black") +
geom_errorbar(aes(ymin = Mean_Reception - Standard_Error, ymax = Mean_Reception + Standard_Error),
position = position_dodge(width = 0.9), width = 0.25) +
geom_jitter(data = reception_proportion_data_Imprecision,
aes(x = Imprecision_Valence, y = Proportion_Reception),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.9),
color = gray(0.6), alpha = 1, size = 1) +
labs(title = "Imprecision",
x = NULL,
y = "Choices to receive") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
labs(fill = "Veracity:") +
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) + # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
### Polarization
# Compute proportion data using the subject-wise mean
reception_proportion_data_Polarization <- dRec_Polarization %>%
group_by(Polarization_Valence, Veracity, Subject) %>%
summarize(Proportion_Reception = sum(Reception == 1) / n())
# Reorder levels for facet_grid and Valence
reception_proportion_data_Polarization$Veracity <- factor(reception_proportion_data_Polarization$Veracity, levels = c("False", "True"))
reception_proportion_data_Polarization$Polarization_Valence <- factor(reception_proportion_data_Polarization$Polarization_Valence, levels = c("Consensual", "Polarizing"))
# Compute mean and standard error for each combination of Polarization_Valence and Veracity
reception_proportion_data_Polarization_summary <- reception_proportion_data_Polarization %>%
group_by(Polarization_Valence, Veracity) %>%
summarize(Mean_Reception = mean(Proportion_Reception),
Standard_Error = sd(Proportion_Reception) / sqrt(n()))
# Barplot with error bars using geom_col
reception_Polarization_barplot <- ggplot(reception_proportion_data_Polarization_summary, aes(x = Polarization_Valence, y = Mean_Reception, fill = Veracity)) +
geom_col(position = position_dodge(width = 0.9), color = "black") +
geom_errorbar(aes(ymin = Mean_Reception - Standard_Error, ymax = Mean_Reception + Standard_Error),
position = position_dodge(width = 0.9), width = 0.25) +
geom_jitter(data = reception_proportion_data_Polarization,
aes(x = Polarization_Valence, y = Proportion_Reception),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.9),
color = gray(0.6), alpha = 1, size = 1) +
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18)) +
theme(legend.title = element_text(size = 18)) +
theme(legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
### IMPRECISION
# Box plot for Imprecision without jittered points
success_imprecision_barplot <- ggplot(success_proportion_data_Imprecision_summary, aes(x = Imprecision_Valence, y = Mean_Success, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Imprecision",
x = NULL,
y = "Correct judgments") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color = "black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color = "black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
labs(fill = "Veracity:") +
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) + # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
### POLARIZATION
# Box plot for Polarization without jittered points
success_polarization_barplot <- ggplot(success_proportion_data_Polarization_summary, aes(x = Polarization_Valence, y = Mean_Success, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color = "black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color = "black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
# Combine the plots
success_combined_boxplots <- ggarrange(success_imprecision_barplot, success_polarization_barplot, ncol = 2, nrow = 1, common.legend = TRUE, legend = "top")
success_combined_boxplots
ggplot(reception_proportion_data_Polarization, aes(x = Polarization_Valence, y = Proportion_Reception, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
ggplot(reception_proportion_data_Imprecision, aes(x = Imprecision_Valence, y = Proportion_Reception, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Imprecision",
x = NULL,
y = "Choices to receive") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
labs(fill = "Veracity:") +
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
ggplot(judgment_proportion_data_Polarization_summary, aes(x = Polarization_Valence, y = Mean_Judgment, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18)) +
theme(legend.title = element_text(size = 18)) +
theme(legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
ggplot(judgment_proportion_data_Polarization, aes(x = Polarization_Valence, y = Proportion_Judgment, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18)) +
theme(legend.title = element_text(size = 18)) +
theme(legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
ggplot(judgment_proportion_data_Imprecision, aes(x = Imprecision_Valence, y = Proportion_Judgment, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Imprecision",
x = NULL,
y = "Judgments as true") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
labs(fill = "Veracity:") +
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) + # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
### IMPRECISION
# Box plot for Imprecision without jittered points
success_imprecision_barplot <- ggplot(success_proportion_data_Imprecision, aes(x = Imprecision_Valence, y = Proportion_Success, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Imprecision",
x = NULL,
y = "Correct judgments") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color = "black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color = "black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
labs(fill = "Veracity:") +
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) + # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
### POLARIZATION
# Box plot for Polarization without jittered points
success_polarization_barplot <- ggplot(success_proportion_data_Polarization, aes(x = Polarization_Valence, y = Proportion_Success, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color = "black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color = "black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
# Combine the plots
success_combined_boxplots <- ggarrange(success_imprecision_barplot, success_polarization_barplot, ncol = 2, nrow = 1, common.legend = TRUE, legend = "top")
success_combined_boxplots
ggsave("success_boxplot.png", path = 'C:/Users/vguigon/Downloads', width = 5.5, height = 3.5, device='png', dpi=300, limitsize=FALSE)
### IMPRECISION
# Box plot for Imprecision without jittered points
judgment_imprecision_barplot <- ggplot(judgment_proportion_data_Imprecision, aes(x = Imprecision_Valence, y = Proportion_Judgment, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Imprecision",
x = NULL,
y = "Judgments as true") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
labs(fill = "Veracity:") +
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) + # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
### POLARIZATION
# Box plot for Polarization without jittered points
judgment_polarization_barplot <- ggplot(judgment_proportion_data_Polarization, aes(x = Polarization_Valence, y = Proportion_Judgment, fill = Veracity)) +
geom_boxplot(position = position_dodge(width = 0.9), color = "black", alpha = 1) +  # Box plot with solid fill
labs(title = "Polarization",
x = NULL,
y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(size = 14, color="black"),  # Adjust x-axis text size
axis.text.y = element_text(size = 14, color="black"),  # Adjust y-axis text size
axis.title = element_text(size = 18)) +
theme(legend.title = element_text(size = 18)) +
theme(legend.text = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust title size
theme(strip.text.y = element_text(angle = 0)) +  # Adjust the angle of facet labels
theme(legend.position = "none") +
coord_cartesian(ylim = c(0, 1)) +  # Adjust y-axis limits
scale_y_continuous(breaks = seq(0, 1, by = 0.1))
# Combine the plots
judgment_combined_boxplots <- ggarrange(judgment_imprecision_barplot, judgment_polarization_barplot, ncol = 2, nrow = 1, common.legend = TRUE, legend = "top")
judgment_combined_boxplots
ggsave("judgment_boxplot.png", path = 'C:/Users/vguigon/Downloads', width = 5.5, height = 3.5, device='png', dpi=300, limitsize=FALSE)
##### VARIABLES #####
# Free memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
##### VARIABLES #####
# Free memory
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memory and report the memory usage
list.of.packages <- c("lme4", "pracma", "ggplot2", "sjPlot", "emmeans", "interactions", "jtools",
"ggpubr", "mediation", "RColorBrewer", "broom.mixed", "purrr",
"rprojroot", "webshot",
"mediation")
{
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
}
# set paths and mk necessary directories
set.seed(12345)
project_root = find_rstudio_root_file()
if (!dir.exists(paste(project_root, "/outputs/figures/R", sep=""))){
dir.create(paste(project_root, "/outputs/figures/R", sep=""))
}else{
print("dir exists")
}
figure_path = paste(project_root, "/outputs/figures/R", sep="")
if (!dir.exists(paste(project_root, "/scripts/analysis/tab_model_rand2_htmlfiles", sep=""))){
dir.create(paste(project_root, "/scripts/analysis/tab_model_rand2_htmlfiles", sep=""))
}else{
print("dir exists")
}
# read the data
dRec <- read.csv(paste(project_root,"/data/processed/receivingNews_data.csv", sep=""))
# transform the data
source(paste(project_root,"/scripts/src/utility/ReceivingNews_analysis_utility.R", sep=""))
dRec = rename_variables(dRec)
nan_str_count = check_nan_strings(dRec)
dRec = correct_nan_strings(dRec, nan_str_count)
dRec = mutate_values(dRec)
dRec = mutate_types(dRec)
dRec = dRec %>% mutate(Veracity = relevel(Veracity, "False"))
dRec = dRec %>% mutate(Judgment = relevel(Judgment, "False"))
dRec_unscaled = dRec
##### Multicollinearity #####
# We handle multicollinearity by orthogonalizing with the Gram-Schmidt algorithm
# But first we mean-center
dRec$Imprecision = scale(dRec$Imprecision, center=TRUE, scale=FALSE)
dRec$Polarization = scale(dRec$Polarization, center=TRUE, scale=FALSE)
# Next we orthogonalize
data_for_orth = as.matrix(dRec[, c("Imprecision", "Polarization")])
data_orth = gramSchmidt(data_for_orth)
Imprecision = (Imprecision=data_orth$Q[,1])
Polarization = (Polarization=data_orth$Q[,2])
dRec$Imprecision = Imprecision
dRec$Polarization = Polarization
# Then we standardize the data
# Standardizing after orthogonalization can bring the variables to a common scale, which can aid in the interpretability of the coefficients
dRec$Imprecision = scale(dRec$Imprecision, center=FALSE, scale=TRUE)
dRec$Polarization = scale(dRec$Polarization, center=FALSE, scale=TRUE)
dRec_conf_unscaled = dRec
##### Finish preprocessing #####
# We rescale the other variables
dRec = rescale_variables(dRec)
# create subdata
ecology = dRec[dRec$Theme == 'Ecology', ]; names(ecology)[names(ecology) == "Success"] <- "Ecology_success"
democracy = dRec[dRec$Theme == 'Democracy', ]; names(democracy)[names(democracy) == "Success"] <- "Democracy_success"
socjust = dRec[dRec$Theme == 'Social Justice', ]; names(socjust)[names(socjust) == "Success"] <- "SocJust_success"
dRecYear2 = dRec[dRec$Year == 2021, ]
names(dRecYear2)[names(dRecYear2) == "Prcnt_politique"] <- "Distrust_politics"
names(dRecYear2)[names(dRecYear2) == "Prcnt_journaliste"] <- "Distrust_journalists"
names(dRecYear2)[names(dRecYear2) == "Prcnt_medecin"] <- "Distrust_physicians"
names(dRecYear2)[names(dRecYear2) == "Prcnt_acteurjustsoc"] <- "Distrust_socjust_activists"
names(dRecYear2)[names(dRecYear2) == "Prcnt_chercheur"] <- "Distrust_researchers"
names(dRecYear2)[names(dRecYear2) == "Prcnt_acteurecologie"] <- "Distrust_environmental_activists"
names(dRecYear2)[names(dRecYear2) == "Prcnt_general"] <- "Distrust_general"
ecologyYear2 = dRecYear2[dRecYear2$Theme == 'Ecology', ]
democracyYear2 = dRecYear2[dRecYear2$Theme == 'Democracy', ]
socjustYear2 = dRecYear2[dRecYear2$Theme == 'SocJust', ]
# in case of need: Command to select optimizer
'
model = glmer(response ~ fixed_effect + (1|Subject), data=data, family=binomial(link=""logit""))
model_allFits = allFit(model)
glance(model_allFits) |> select(optimizer, AIC, NLL_rel) |> arrange(NLL_rel)
'
# Note that we didn't assign random effects into a nested structure such as Year/Group/Subject to save computation time
# (time could >15 min per glmer)
##### A. MLM of success: Better performances for true news #####
### Models
mSuccess_truth_themes = glmer(Success ~ Veracity +
(1|Subject), data=dRec, family=binomial(link="logit"))
mSuccess_truth_themes2 = glmer(Success ~ Veracity*Theme +
(1|Subject), data=dRec, family=binomial(link="logit"))
mSuccess_truth_themes2_ctrld = glmer(Success ~ Veracity*Theme + Confidence + Judgment + Age + Sex + Education + Epistemic_curiosity +
(1+Judgment+Confidence|Subject), data=dRec, family=binomial(link="logit"))
load("C:/Users/vguigon/Desktop/ReceivingNews - R_environments/R_environments/ReceivingNews-Mixed_Linear_Models_main_rand2_env.RData")
load("C:/Users/vguigon/Desktop/ReceivingNews - R_environments/R_environments/ReceivingNews-Stimuli_ICC_env.RData")
ICC_imprecision
load("C:/Users/vguigon/Desktop/ReceivingNews - R_environments/R_environments/ReceivingNews-Mixed_Linear_Models_main_rand2_env.RData")
ICC_split
load("C:/Users/vguigon/Desktop/ReceivingNews - R_environments/R_environments/ReceivingNews-Stimuli_ICC_env.RData")
ICC_split
ICC_consensuality
ICC_desirability
load("C:/Users/vguigon/Desktop/ReceivingNews - R_environments/R_environments/ReceivingNews-Mixed_Linear_Models_main_rand2_env.RData")
estSuccess_truth_themes
estSuccess_truth_themes_pairs
estSuccess_truth_themes2
estSuccess_truth_themes_pairs2
estSuccess_truth_judgment
estSuccess_truth_judgment_pairs
estJudgment_truth_theme
estJudgment_truth_theme_pairs
estJudgment_truth_theme_size
estJudgment_truth_theme_pairs
estSuccess_truth_imprec
estSuccess_truth_imprec_pairs
estSuccess_truth_imprec_size = eff_size(estSuccess_truth_imprec, sigma = sigma(mSuccess_truth_ambig_ctrld2), edf = Inf) # gives comparisons effect size
estSuccess_truth_imprec_size
estSuccess_truth_polar_pairs
estSuccess_truth_imprec_confint
estSuccess_truth_polar_confint
estSuccess_truth_imprec_size
estSuccess_truth_imprec_pairs
estSuccess_truth_imprec
estSuccess_truth_imprec_size
mSuccess_truth_ambig_ctrld2
summary(mSuccess_truth_ambig_ctrld2)
estJudgment_truth_imprec_pairs
estJudgment_truth_polar_pairs
estSuccess_truth_imprec_size
estSuccess_truth_imprec_confint
estSuccess_truth_imprec_pairs
